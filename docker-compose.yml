version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14
    container_name: dpp_postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    networks:
      - dpp_network
    environment:
      - POSTGRES_DB=dpp_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"

  # Redis for caching
  redis:
    image: redis:6-alpine
    container_name: dpp_redis
    restart: always
    networks:
      - dpp_network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  backend:
    build: ./backend
    container_name: dpp_backend
    restart: always
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
    networks:
      - dpp_network
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - SECRET_KEY=your-secret-key-here
      - POSTGRES_DB=dpp_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - REDIS_URL=redis://redis:6379/1
      - FIELD_ENCRYPTION_KEY=rYREf8c5TT-V7D_dj49COq3T-B7c2SualwfOWD1Ypeo=
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://frontend:3000
    command: >
      bash -c "python manage.py migrate &&
               python manage.py runserver 0.0.0.0:8000"

  # React Frontend
  frontend:
    build: ./frontend
    container_name: dpp_frontend
    restart: always
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - dpp_network
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api
    stdin_open: true
    tty: true

  # Nginx for serving static files and as a reverse proxy
  nginx:
    image: nginx:1.23
    ports:
      - "8080:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - ./static:/static
    depends_on:
      - backend
      - frontend
    networks:
      - dpp_network

networks:
  dpp_network:
    driver: bridge

volumes:
  postgres_data:
  static_volume:
  media_volume: 